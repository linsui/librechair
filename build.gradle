/*
 *     This file is part of Lawnchair Launcher.
 *
 *     Lawnchair Launcher is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     Lawnchair Launcher is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with Lawnchair Launcher.  If not, see <https://www.gnu.org/licenses/>.
 */

import org.gradle.api.tasks.wrapper.Wrapper.DistributionType

buildscript {
    ext.kotlin_version = '1.3.50'
    ext {
        geckoviewChannel = "nightly"
        geckoviewVersion = "71.0.20191004094656"
    }
    repositories {
        maven { url "https://maven.mozilla.org/maven2/" }
        google()
        jcenter()
        maven { url 'https://maven.repository.redhat.com/ga/' }
        maven { url "https://jitpack.io" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.1'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

tasks {
    wrapper {
        gradleVersion = "5.4.1"
        distributionType = DistributionType.ALL
    }
}

final String SUPPORT_LIBS_VERSION = '28.0.0-alpha1'

Properties localProps = new Properties()
File localPropsFile = project.rootProject.file('local.properties')
if (localPropsFile.exists()) {
    localProps.load(localPropsFile.newDataInputStream())
}

def publicBranches = ["alpha", "beta"]
def ciBuild = localProps.getProperty("ciBuild") == "true" || System.getenv("CI_BUILD") == "true"
def isPublicBuild = localProps.getProperty("public") == "true" || (ciBuild && publicBranches.contains(System.getenv("DRONE_BRANCH")))
configurations.all {
    resolutionStrategy.eachDependency { details ->
        if (details.requested.group == 'com.android.support') {
            details.useVersion "${SUPPORT_LIBS_VERSION}"
        }
    }
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    try {
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
    } catch (Exception e) {
        e.printStackTrace()
    }
    return stdout.toString().trim()
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.protobuf'

android {
    compileSdkVersion 29
    buildToolsVersion '28.0.3'

    packagingOptions {
        exclude "META-INF/DEPENDENCIES"
    }

    signingConfigs {
        ci {
            storeFile file("debug.jks")
            storePassword localProps.getProperty("storePass") ?: System.getenv("STORE_PASSWORD")
            keyAlias "Lawnchair"
            keyPassword localProps.getProperty("keyPass") ?: System.getenv("KEY_PASSWORD")
        }
    }
    defaultConfig {
        minSdkVersion 28
        targetSdkVersion 29
        multiDexEnabled true

        if (ciBuild) {
            def ciBuildNumber = localProps.getProperty("buildNumber") ?: System.getenv("CI_BUILD_NUMBER")
            versionCode = Integer.valueOf(ciBuildNumber)
            def majorMinor = localProps.getProperty("majorMinor") ?: System.getenv("MAJOR_MINOR")
            def drone = localProps.getProperty("public") == "true" || System.getenv("DRONE")
            versionName = majorMinor + (drone ? "-" : ".") + ciBuildNumber
        } else {
            versionCode 2
            versionName getGitHash()
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        dataBinding {
            enabled = true
        }

        buildConfigField "boolean", "FEATURE_QUINOA", "true"
        buildConfigField "boolean", "FEATURE_SETTINGS_SEARCH", "true"
        buildConfigField "boolean", "DEBUG_STRICT_MODE", "false"
        buildConfigField "boolean", "HAS_LEAKCANARY", "false"

        def githubToken = localProps.getProperty('githubToken') ?: '"' + System.getenv("GITHUB_TOKEN") + '"'
        buildConfigField "String", "GITHUB_TOKEN", githubToken

        buildConfigField "boolean", "SIGNATURE_VERIFICATION", "true"

        def debugMenuCode = System.getenv("DEBUG_MENU_CODE") ?: "veryperu"
        buildConfigField "String", "DEBUG_MENU_CODE_HASH", '"' + debugMenuCode.digest('SHA-1') + '"'

        def accuWeatherKey = "\"a66ee5e2ffcb44e8955c7cc9e84f2cf5\""
        buildConfigField "String", "WEATHER_CHANNEL_KEY", '"' + (System.getenv("WC_KEY") == null ? "8de2d8b3a93542c9a2d8b3a935a2c909" : System.getenv("WC_KEY")) + '"'
        buildConfigField "String", "WEATHER_CHANNEL_FORECAST_KEY", '"' + (System.getenv("WC_FORECAST_KEY") == null ? "d522aa97197fd864d36b418f39ebb323" : System.getenv("WC_FORECAST_KEY")) + '"'
        buildConfigField "String", "ACCUWEATHER_KEY", accuWeatherKey

        ndk {
            abiFilters "armeabi-v7a", "x86", "x86_64", "arm64-v8a"
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            if (ciBuild) {
                if (System.getenv("CI_EVENT_TYPE") != "pull_request") {
                    signingConfig signingConfigs.ci
                }
            }

            dexOptions {
                matchingFallbacks = ['debug']
            }
        }

        optimized {
            /*
             * LIBRE_CHANGED: Proguard minification gets in the way of audits and reverse-engineering
             */
            initWith debug
            minifyEnabled false
            if (ciBuild) {
                if (System.getenv("CI_EVENT_TYPE") != "pull_request") {
                    signingConfig signingConfigs.ci
                }
            }
        }

        release {
            /*
             * LIBRE_CHANGED: Proguard minification gets in the way of audits and reverse-engineering
             */
            minifyEnabled false
            if (ciBuild) {
                if (System.getenv("CI_EVENT_TYPE") != "pull_request") {
                    signingConfig signingConfigs.ci
                }
            }

            dexOptions {
                matchingFallbacks = ['release']
            }
        }
    }

    lintOptions {
        checkReleaseBuilds false
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "default", "custom", "go", "build", "gecko"

    productFlavors {
        aosp {
            dimension "default"
            applicationId 'launcher.libre'
            testApplicationId 'com.android.launcher3.tests'
        }

        l3go {
            dimension "go"
            applicationIdSuffix ".go"
            versionNameSuffix "-dev"
        }

        l3ri {
            dimension "go"
        }

        quickstep {
            dimension "default"
            applicationId 'launcher.libre'
            testApplicationId 'com.android.launcher3.tests'
        }

        lawnchair {
            dimension "custom"
        }

        dev {
            dimension "build"
            // Use v1 dev package name for compatibility testing
            if (localProps.getProperty("v1compat") != "true") {
                applicationIdSuffix ".dev"
            }
            versionNameSuffix "-dev"
        }

        ci {
            dimension "build"
            applicationIdSuffix ".ci"
            versionNameSuffix "-ci-" + (localProps.getProperty("branch") ?: System.getenv("DRONE_BRANCH"))

            buildConfigField "boolean", "SIGNATURE_VERIFICATION", "true"
        }

        plah {
            dimension "build"
            applicationIdSuffix ".plah"

            buildConfigField "boolean", "SIGNATURE_VERIFICATION", "true"
        }

        withGecko {
            dimension "gecko"

            buildConfigField "boolean", "GECKO", "true"
        }

        withWebView {
            dimension "gecko"

            buildConfigField "boolean", "GECKO", "false"
        }
    }

    sourceSets {
        main {
            res.srcDirs = ['res']
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            assets.srcDirs = ['assets']
            manifest.srcFile 'AndroidManifest-common.xml'
            proto {
                srcDir 'protos/'
                srcDir 'proto_overrides/'
                srcDir 'proto_pixel/'
            }
        }

        debug {
            manifest.srcFile "AndroidManifest.xml"
        }

        optimized {
            manifest.srcFile "AndroidManifest.xml"
        }

        release {
            manifest.srcFile "AndroidManifest.xml"
        }

        androidTest {
            res.srcDirs = ['tests/res']
            java.srcDirs = ['tests/src']
            manifest.srcFile "tests/AndroidManifest-common.xml"
        }

        androidTestDebug {
            manifest.srcFile "tests/AndroidManifest.xml"
        }

        aosp {
            java.srcDirs = ['src_flags', "src_ui_overrides"]
        }

        l3go {
            res.srcDirs = ['go/res']
            java.srcDirs = ['go/src_flags']
            manifest.srcFile "go/AndroidManifest.xml"
        }

        l3ri {
            java.srcDirs = ['src_flags']
        }

        quickstep {
            res.srcDirs = ['quickstep/res']
            java.srcDirs = ['quickstep/src']
            manifest.srcFile "quickstep/AndroidManifest.xml"
        }

        lawnchair {
            res.srcDirs = ['lawnchair/res']
            java.srcDirs = ['lawnchair/src']
            manifest.srcFile "lawnchair/AndroidManifest.xml"
        }

        withWebView {
            res.srcDirs = ['webview/res']
        }
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs.add('-Xbootclasspath/p:prebuilts/libs/framework.jar')
        }
    }
}

afterEvaluate {
    android.applicationVariants.all { variant ->
        variant.resValue 'string', 'application_id', variant.applicationId
    }
}

apply from: 'lawnchair/smali.gradle'

allprojects {
    repositories {
        maven { url "https://maven.mozilla.org/maven2/" }
        google()
        mavenCentral()
        jcenter()
        maven { url 'https://jitpack.io' }
        maven {
            url 'https://maven.repository.redhat.com/ga/'
        }
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.2.0-alpha01'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.dynamicanimation:dynamicanimation:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.palette:palette:1.0.0'
    implementation 'androidx.preference:preference:1.1.0'
    implementation 'androidx.legacy:legacy-preference-v14:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'info.bliki.wiki:bliki-core:3.1.0'
    implementation 'commons-io:commons-io:2.6'
    implementation 'me.weishu:free_reflection:2.1.0'
    implementation "androidx.multidex:multidex:2.0.0"
    implementation 'net.time4j:time4j-android:4.4.3-2019c'

    compileOnly fileTree(dir: 'prebuilts/libs', include: '*.jar')

    implementation 'io.github.java-diff-utils:java-diff-utils:4.0'

    implementation 'com.github.mmin18:realtimeblurview:1.2.1'

    implementation 'com.rometools:rome:1.12.1'
    implementation 'com.googlecode:openbeans:1.0'

    implementation 'com.github.florent37:fiftyshadesof:1.0.0'
    implementation 'com.google.protobuf.nano:protobuf-javanano:3.0.0-alpha-7'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.github.KwabenBerko:OpenWeatherMap-Android-Library:2.0.1'
    implementation 'net.aksingh:owm-japis:2.5.3.0'
    implementation 'com.github.LawnchairLauncher:chroma:1.2.6'
    implementation 'com.github.LawnchairLauncher:hoko-lite:4e0d797'
    implementation('com.github.LawnchairLauncher:attribouter-y:0.1.6') {
        // The "MaterialButton" styleable defines an attr named iconSize which breaks compatibility with our source base
        exclude group: 'com.android.support', module: 'design'
    }
    implementation 'com.github.bumptech.glide:glide:4.8.0'
    implementation 'com.github.topjohnwu.libsu:core:2.5.0'
    implementation 'com.squareup.picasso:picasso:2.71828'
    implementation 'eu.chainfire:librootjava:1.3.0'
    implementation 'me.mvdw.recyclerviewmergeadapter:recyclerviewmergeadapter:2.1.0'
    implementation 'com.squareup.retrofit2:retrofit:2.6.0'
    implementation 'com.squareup.okhttp3:okhttp:4.0.0-RC1'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.0.0-RC1'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.0'
    implementation 'io.swagger.core.v3:swagger-annotations:2.0.0'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'androidx.media2:media2-session:1.0.1'

    implementation 'org.roboguice:roboguice:4.0.0'
    implementation 'com.zaxxer:HikariCP:3.3.1'
    implementation 'org.xerial:sqlite-jdbc:3.28.0'
    implementation 'com.google.guava:guava:28.0-android'

    implementation 'io.github.cdimascio:essence:0.13.0'
    implementation 'com.github.Gryzor:SwipeNoLib:v1.0.6'

    implementation 'me.xdrop:fuzzywuzzy:1.2.0'

    withGeckoImplementation "org.mozilla.geckoview:geckoview-${geckoviewChannel}:${geckoviewVersion}"
    withWebViewCompileOnly "org.mozilla.geckoview:geckoview-${geckoviewChannel}:${geckoviewVersion}"

    quickstepImplementation project(':systemui-shared')
    l3goImplementation project(':systemui-shared')

    implementation project(':launcherclient')

    if (!isPublicBuild) {
        // TODO: update to 2.x when we're on AndroidX
        implementation 'com.squareup.leakcanary:leakcanary-android:1.6.3'
        implementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.3'
    } else {
        implementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3'
    }
    implementation 'fastily:jwiki:1.7.0'
    testImplementation 'junit:junit:4.12'
    implementation "androidx.camera:camera-core:1.0.0-alpha06"
    implementation "androidx.camera:camera-camera2:1.0.0-alpha06"
    androidTestImplementation "org.mockito:mockito-core:1.10.5"
    androidTestImplementation 'com.google.dexmaker:dexmaker:1.2'
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'androidx.annotation:annotation:1.1.0'
    implementation "org.jetbrains.kotlin:kotlin-reflect:1.3.50"
    implementation "androidx.room:room-runtime:2.2.0-rc01"

    implementation "io.reactivex.rxjava3:rxjava:3.0.0-RC3"

    implementation 'com.github.MKergall:osmbonuspack:6.6.0'

    implementation 'org.osmdroid:osmdroid-android:6.1.2'

    implementation 'com.google.android:flexbox:1.1.0'

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.0"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.0'
    annotationProcessor "androidx.room:room-compiler:2.2.0-beta01"
    kapt "androidx.room:room-compiler:2.2.0-beta01"

    implementation 'androidx.lifecycle:lifecycle-livedata:2.2.0-alpha03'
    implementation 'com.gitlab.oldosfan:lisp:5a2ee34362765e4ee8e393eaa7c119e206c81d64'
}

protobuf {
    // Configure the protoc executable
    protoc {
        artifact = 'com.google.protobuf:protoc:3.0.0-alpha-3'

        generateProtoTasks {
            all().each { task ->
                task.builtins {
                    remove java
                    javanano {
                        option "java_package=launcher_log_extension.proto|com.android.launcher3.userevent.nano"
                        option "java_package=launcher_log.proto|com.android.launcher3.userevent.nano"
                        option "java_package=launcher_dump.proto|com.android.launcher3.model.nano"
                        option "java_package=search.proto|com.google.android.apps.nexuslauncher.search.nano"
                        option "java_package=smartspace.proto|com.google.android.apps.nexuslauncher.smartspace.nano"
                        option "enum_style=java"
                    }
                }
            }
        }
    }
}

apply plugin: 'kotlin-android-extensions'